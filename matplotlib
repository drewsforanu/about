import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation

# 参数设置
num_boids = 50
width, height = 640, 480
max_speed = 4
min_distance = 20
alignment_weight = 0.05
cohesion_weight = 0.01
separation_weight = 0.1

# 初始化 boids 的位置和速度
positions = np.random.rand(num_boids, 2) * [width, height]
velocities = (np.random.rand(num_boids, 2) - 0.5) * max_speed

def update_boids(positions, velocities):
    new_positions = positions.copy()
    new_velocities = velocities.copy()
    for i in range(num_boids):
        # 计算与其他 boids 的差向量和距离
        diffs = positions - positions[i]
        distances = np.linalg.norm(diffs, axis=1)
        mask = (distances > 0) & (distances < 100)
        neighbors = np.where(mask)[0]
        
        # 对齐：向邻居平均速度靠拢
        if len(neighbors) > 0:
            avg_velocity = np.mean(velocities[neighbors], axis=0)
            alignment = (avg_velocity - velocities[i]) * alignment_weight
        else:
            alignment = 0
        
        # 聚合：向邻居中心靠拢
        if len(neighbors) > 0:
            center = np.mean(positions[neighbors], axis=0)
            cohesion = (center - positions[i]) * cohesion_weight
        else:
            cohesion = 0
        
        # 分离：避免太近距离
        separation = np.sum(-diffs[neighbors] / (distances[neighbors][:, None]**2 + 1e-4), axis=0) * separation_weight
        
        # 更新速度
        new_velocities[i] += alignment + cohesion + separation
        
        # 限制最大速度
        speed = np.linalg.norm(new_velocities[i])
        if speed > max_speed:
            new_velocities[i] = new_velocities[i] / speed * max_speed
        
        # 更新位置
        new_positions[i] += new_velocities[i]
        
        # 边界条件：简单反弹效果
        for dim in [0, 1]:
            limit = width if dim == 0 else height
            if new_positions[i, dim] < 0 or new_positions[i, dim] > limit:
                new_velocities[i, dim] *= -1
                new_positions[i, dim] = np.clip(new_positions[i, dim], 0, limit)
                
    return new_positions, new_velocities

fig, ax = plt.subplots()
scat = ax.scatter(positions[:, 0], positions[:, 1])
ax.set_xlim(0, width)
ax.set_ylim(0, height)
ax.set_title("Boids 模拟")

def animate(frame):
    global positions, velocities
    positions, velocities = update_boids(positions, velocities)
    scat.set_offsets(positions)
    return scat,

ani = animation.FuncAnimation(fig, animate, frames=200, interval=50, blit=True)
plt.show()
